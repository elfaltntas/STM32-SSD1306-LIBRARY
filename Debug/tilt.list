
tilt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  080034d8  080034d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c0  080042c0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  080042c0  080042c0  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c0  080042c0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  2000005c  08004324  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08004324  00006658  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009981  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef3  00000000  00000000  0000fa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00011900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000736  00000000  00000000  00012280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d13  00000000  00000000  000129b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d04e  00000000  00000000  0002a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e99  00000000  00000000  00037717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf5b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae4  00000000  00000000  000bf5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c20d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034c0 	.word	0x080034c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080034c0 	.word	0x080034c0

0800014c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */


int i = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	i++;
 8000156:	4b05      	ldr	r3, [pc, #20]	@ (800016c <HAL_GPIO_EXTI_Callback+0x20>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	3301      	adds	r3, #1
 800015c:	4a03      	ldr	r2, [pc, #12]	@ (800016c <HAL_GPIO_EXTI_Callback+0x20>)
 800015e:	6013      	str	r3, [r2, #0]

}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	200000fc 	.word	0x200000fc

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fd61 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f893 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f957 	bl	8000430 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000182:	f000 f8e9 	bl	8000358 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000186:	f000 f925 	bl	80003d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800018a:	f000 fa07 	bl	800059c <ssd1306_Init>
  ssd1306_Fill(Black); // Ekranı temizle
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fa6e 	bl	8000670 <ssd1306_Fill>

  // OLED ekranı başlat
  ssd1306_Init();
 8000194:	f000 fa02 	bl	800059c <ssd1306_Init>
  ssd1306_Fill(Black); // Ekranı temizle
 8000198:	2000      	movs	r0, #0
 800019a:	f000 fa69 	bl	8000670 <ssd1306_Fill>

  // Yazıyı ekrana yaz
  ssd1306_SetCursor(30, 30);
 800019e:	211e      	movs	r1, #30
 80001a0:	201e      	movs	r0, #30
 80001a2:	f000 fbad 	bl	8000900 <ssd1306_SetCursor>
  ssd1306_WriteString("URUN SAY", Font_11x18, White);
 80001a6:	4b39      	ldr	r3, [pc, #228]	@ (800028c <main+0x11c>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	9200      	str	r2, [sp, #0]
 80001ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001ae:	4838      	ldr	r0, [pc, #224]	@ (8000290 <main+0x120>)
 80001b0:	f000 fb80 	bl	80008b4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80001b4:	f000 fa74 	bl	80006a0 <ssd1306_UpdateScreen>
  HAL_Delay(3000);
 80001b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001bc:	f000 fda0 	bl	8000d00 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

		char buffer[16];  // Karakter dizisini tanımla
		sprintf(buffer, "URUN: %d", i);  // 'i' değişkeninin değerini string formatında oluştur
 80001c0:	4b34      	ldr	r3, [pc, #208]	@ (8000294 <main+0x124>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4934      	ldr	r1, [pc, #208]	@ (8000298 <main+0x128>)
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 fcc9 	bl	8002b60 <siprintf>

		if(i>=0 & i<6){
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <main+0x124>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	43db      	mvns	r3, r3
 80001d4:	0fdb      	lsrs	r3, r3, #31
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <main+0x124>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b05      	cmp	r3, #5
 80001de:	bfd4      	ite	le
 80001e0:	2301      	movle	r3, #1
 80001e2:	2300      	movgt	r3, #0
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	4013      	ands	r3, r2
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d015      	beq.n	800021a <main+0xaa>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2140      	movs	r1, #64	@ 0x40
 80001f2:	482a      	ldr	r0, [pc, #168]	@ (800029c <main+0x12c>)
 80001f4:	f001 fb26 	bl	8001844 <HAL_GPIO_WritePin>
			ssd1306_Fill(Black);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 fa39 	bl	8000670 <ssd1306_Fill>
			ssd1306_SetCursor(30, 30);
 80001fe:	211e      	movs	r1, #30
 8000200:	201e      	movs	r0, #30
 8000202:	f000 fb7d 	bl	8000900 <ssd1306_SetCursor>
			ssd1306_WriteString(buffer, Font_11x18, White);
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <main+0x11c>)
 8000208:	1d38      	adds	r0, r7, #4
 800020a:	2201      	movs	r2, #1
 800020c:	9200      	str	r2, [sp, #0]
 800020e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000210:	f000 fb50 	bl	80008b4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000214:	f000 fa44 	bl	80006a0 <ssd1306_UpdateScreen>
 8000218:	e7d2      	b.n	80001c0 <main+0x50>

				}
	  	else {

	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800021a:	2201      	movs	r2, #1
 800021c:	2180      	movs	r1, #128	@ 0x80
 800021e:	481f      	ldr	r0, [pc, #124]	@ (800029c <main+0x12c>)
 8000220:	f001 fb10 	bl	8001844 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2140      	movs	r1, #64	@ 0x40
 8000228:	481c      	ldr	r0, [pc, #112]	@ (800029c <main+0x12c>)
 800022a:	f001 fb0b 	bl	8001844 <HAL_GPIO_WritePin>

	  		ssd1306_Fill(Black);
 800022e:	2000      	movs	r0, #0
 8000230:	f000 fa1e 	bl	8000670 <ssd1306_Fill>
			ssd1306_SetCursor(30, 30);
 8000234:	211e      	movs	r1, #30
 8000236:	201e      	movs	r0, #30
 8000238:	f000 fb62 	bl	8000900 <ssd1306_SetCursor>

			ssd1306_WriteString("SINIR!!", Font_11x18, White);
 800023c:	4b13      	ldr	r3, [pc, #76]	@ (800028c <main+0x11c>)
 800023e:	2201      	movs	r2, #1
 8000240:	9200      	str	r2, [sp, #0]
 8000242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000244:	4816      	ldr	r0, [pc, #88]	@ (80002a0 <main+0x130>)
 8000246:	f000 fb35 	bl	80008b4 <ssd1306_WriteString>
			for (int x = 0; x < 2; x++) {
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	e016      	b.n	800027e <main+0x10e>
			    // Buzzer'ı aç
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000256:	4811      	ldr	r0, [pc, #68]	@ (800029c <main+0x12c>)
 8000258:	f001 faf4 	bl	8001844 <HAL_GPIO_WritePin>
			    HAL_Delay(300);  // 300 ms bekle
 800025c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000260:	f000 fd4e 	bl	8000d00 <HAL_Delay>

			    // Buzzer'ı kapat
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800026a:	480c      	ldr	r0, [pc, #48]	@ (800029c <main+0x12c>)
 800026c:	f001 faea 	bl	8001844 <HAL_GPIO_WritePin>
				HAL_Delay(300);  // 300 ms bekle
 8000270:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000274:	f000 fd44 	bl	8000d00 <HAL_Delay>
			for (int x = 0; x < 2; x++) {
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	3301      	adds	r3, #1
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	2b01      	cmp	r3, #1
 8000282:	dde5      	ble.n	8000250 <main+0xe0>
				}

			ssd1306_UpdateScreen();
 8000284:	f000 fa0c 	bl	80006a0 <ssd1306_UpdateScreen>
  {
 8000288:	e79a      	b.n	80001c0 <main+0x50>
 800028a:	bf00      	nop
 800028c:	08004254 	.word	0x08004254
 8000290:	080034d8 	.word	0x080034d8
 8000294:	200000fc 	.word	0x200000fc
 8000298:	080034e4 	.word	0x080034e4
 800029c:	40010800 	.word	0x40010800
 80002a0:	080034f0 	.word	0x080034f0

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b094      	sub	sp, #80	@ 0x50
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002ae:	2228      	movs	r2, #40	@ 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fc8e 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d4:	2301      	movs	r3, #1
 80002d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002f0:	2300      	movs	r3, #0
 80002f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 ff7f 	bl	80021fc <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000304:	f000 f90c 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000310:	2380      	movs	r3, #128	@ 0x80
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000318:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f002 f9eb 	bl	8002700 <HAL_RCC_ClockConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000330:	f000 f8f6 	bl	8000520 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000334:	2302      	movs	r3, #2
 8000336:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fb58 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800034a:	f000 f8e9 	bl	8000520 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3750      	adds	r7, #80	@ 0x50
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_ADC1_Init+0x74>)
 800036a:	4a19      	ldr	r2, [pc, #100]	@ (80003d0 <MX_ADC1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036e:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <MX_ADC1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <MX_ADC1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <MX_ADC1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <MX_ADC1_Init+0x74>)
 8000382:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000388:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <MX_ADC1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_ADC1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000394:	480d      	ldr	r0, [pc, #52]	@ (80003cc <MX_ADC1_Init+0x74>)
 8000396:	f000 fcd7 	bl	8000d48 <HAL_ADC_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003a0:	f000 f8be 	bl	8000520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_ADC1_Init+0x74>)
 80003b6:	f000 fe71 	bl	800109c <HAL_ADC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003c0:	f000 f8ae 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000078 	.word	0x20000078
 80003d0:	40012400 	.word	0x40012400

080003d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d8:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <MX_I2C1_Init+0x50>)
 80003da:	4a13      	ldr	r2, [pc, #76]	@ (8000428 <MX_I2C1_Init+0x54>)
 80003dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_I2C1_Init+0x50>)
 80003e0:	4a12      	ldr	r2, [pc, #72]	@ (800042c <MX_I2C1_Init+0x58>)
 80003e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <MX_I2C1_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_I2C1_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <MX_I2C1_Init+0x50>)
 80003f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000404:	4b07      	ldr	r3, [pc, #28]	@ (8000424 <MX_I2C1_Init+0x50>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <MX_I2C1_Init+0x50>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <MX_I2C1_Init+0x50>)
 8000412:	f001 fa47 	bl	80018a4 <HAL_I2C_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 f880 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000a8 	.word	0x200000a8
 8000428:	40005400 	.word	0x40005400
 800042c:	00061a80 	.word	0x00061a80

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b32      	ldr	r3, [pc, #200]	@ (8000510 <MX_GPIO_Init+0xe0>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a31      	ldr	r2, [pc, #196]	@ (8000510 <MX_GPIO_Init+0xe0>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b2f      	ldr	r3, [pc, #188]	@ (8000510 <MX_GPIO_Init+0xe0>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b2c      	ldr	r3, [pc, #176]	@ (8000510 <MX_GPIO_Init+0xe0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a2b      	ldr	r2, [pc, #172]	@ (8000510 <MX_GPIO_Init+0xe0>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b29      	ldr	r3, [pc, #164]	@ (8000510 <MX_GPIO_Init+0xe0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b26      	ldr	r3, [pc, #152]	@ (8000510 <MX_GPIO_Init+0xe0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a25      	ldr	r2, [pc, #148]	@ (8000510 <MX_GPIO_Init+0xe0>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b23      	ldr	r3, [pc, #140]	@ (8000510 <MX_GPIO_Init+0xe0>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green_Pin|red_Pin|buzzer_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 610c 	mov.w	r1, #2240	@ 0x8c0
 8000492:	4820      	ldr	r0, [pc, #128]	@ (8000514 <MX_GPIO_Init+0xe4>)
 8000494:	f001 f9d6 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_GPIO_Port, blue_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2101      	movs	r1, #1
 800049c:	481e      	ldr	r0, [pc, #120]	@ (8000518 <MX_GPIO_Init+0xe8>)
 800049e:	f001 f9d1 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_Pin red_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin|buzzer_Pin;
 80004a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4816      	ldr	r0, [pc, #88]	@ (8000514 <MX_GPIO_Init+0xe4>)
 80004bc:	f001 f83e 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_Pin */
  GPIO_InitStruct.Pin = blue_Pin;
 80004c0:	2301      	movs	r3, #1
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blue_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4810      	ldr	r0, [pc, #64]	@ (8000518 <MX_GPIO_Init+0xe8>)
 80004d8:	f001 f830 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : tilt_Pin */
  GPIO_InitStruct.Pin = tilt_Pin;
 80004dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_GPIO_Init+0xec>)
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(tilt_GPIO_Port, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	4809      	ldr	r0, [pc, #36]	@ (8000518 <MX_GPIO_Init+0xe8>)
 80004f2:	f001 f823 	bl	800153c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	2028      	movs	r0, #40	@ 0x28
 80004fc:	f000 ffe7 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000500:	2028      	movs	r0, #40	@ 0x28
 8000502:	f001 f800 	bl	8001506 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800
 8000518:	40010c00 	.word	0x40010c00
 800051c:	10110000 	.word	0x10110000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <Error_Handler+0x8>

0800052c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af04      	add	r7, sp, #16
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2301      	movs	r3, #1
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2200      	movs	r2, #0
 8000554:	2178      	movs	r1, #120	@ 0x78
 8000556:	4803      	ldr	r0, [pc, #12]	@ (8000564 <ssd1306_WriteCommand+0x2c>)
 8000558:	f001 fae8 	bl	8001b2c <HAL_I2C_Mem_Write>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000a8 	.word	0x200000a8

08000568 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af04      	add	r7, sp, #16
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2240      	movs	r2, #64	@ 0x40
 8000586:	2178      	movs	r1, #120	@ 0x78
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <ssd1306_WriteData+0x30>)
 800058a:	f001 facf 	bl	8001b2c <HAL_I2C_Mem_Write>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000a8 	.word	0x200000a8

0800059c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80005a0:	f7ff ffc4 	bl	800052c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	@ 0x64
 80005a6:	f000 fbab 	bl	8000d00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f9d4 	bl	8000958 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc1 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ffbe 	bl	8000538 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	@ 0xb0
 80005be:	f7ff ffbb 	bl	8000538 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	@ 0xc8
 80005c4:	f7ff ffb8 	bl	8000538 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb5 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb2 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005d4:	2040      	movs	r0, #64	@ 0x40
 80005d6:	f7ff ffaf 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005da:	20ff      	movs	r0, #255	@ 0xff
 80005dc:	f000 f9a8 	bl	8000930 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005e0:	20a1      	movs	r0, #161	@ 0xa1
 80005e2:	f7ff ffa9 	bl	8000538 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005e6:	20a6      	movs	r0, #166	@ 0xa6
 80005e8:	f7ff ffa6 	bl	8000538 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005ec:	20a8      	movs	r0, #168	@ 0xa8
 80005ee:	f7ff ffa3 	bl	8000538 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80005f2:	203f      	movs	r0, #63	@ 0x3f
 80005f4:	f7ff ffa0 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005f8:	20a4      	movs	r0, #164	@ 0xa4
 80005fa:	f7ff ff9d 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005fe:	20d3      	movs	r0, #211	@ 0xd3
 8000600:	f7ff ff9a 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff97 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800060a:	20d5      	movs	r0, #213	@ 0xd5
 800060c:	f7ff ff94 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000610:	20f0      	movs	r0, #240	@ 0xf0
 8000612:	f7ff ff91 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000616:	20d9      	movs	r0, #217	@ 0xd9
 8000618:	f7ff ff8e 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800061c:	2022      	movs	r0, #34	@ 0x22
 800061e:	f7ff ff8b 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000622:	20da      	movs	r0, #218	@ 0xda
 8000624:	f7ff ff88 	bl	8000538 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000628:	2012      	movs	r0, #18
 800062a:	f7ff ff85 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800062e:	20db      	movs	r0, #219	@ 0xdb
 8000630:	f7ff ff82 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000634:	2020      	movs	r0, #32
 8000636:	f7ff ff7f 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800063a:	208d      	movs	r0, #141	@ 0x8d
 800063c:	f7ff ff7c 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000640:	2014      	movs	r0, #20
 8000642:	f7ff ff79 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f986 	bl	8000958 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f80f 	bl	8000670 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000652:	f000 f825 	bl	80006a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <ssd1306_Init+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <ssd1306_Init+0xd0>)
 800065e:	2200      	movs	r2, #0
 8000660:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000662:	4b02      	ldr	r3, [pc, #8]	@ (800066c <ssd1306_Init+0xd0>)
 8000664:	2201      	movs	r2, #1
 8000666:	711a      	strb	r2, [r3, #4]
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000500 	.word	0x20000500

08000670 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <ssd1306_Fill+0x14>
 8000680:	2300      	movs	r3, #0
 8000682:	e000      	b.n	8000686 <ssd1306_Fill+0x16>
 8000684:	23ff      	movs	r3, #255	@ 0xff
 8000686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800068a:	4619      	mov	r1, r3
 800068c:	4803      	ldr	r0, [pc, #12]	@ (800069c <ssd1306_Fill+0x2c>)
 800068e:	f002 faa1 	bl	8002bd4 <memset>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000100 	.word	0x20000100

080006a0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	e016      	b.n	80006da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	3b50      	subs	r3, #80	@ 0x50
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff40 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff ff3d 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006be:	2010      	movs	r0, #16
 80006c0:	f7ff ff3a 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	01db      	lsls	r3, r3, #7
 80006c8:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <ssd1306_UpdateScreen+0x4c>)
 80006ca:	4413      	add	r3, r2
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff4a 	bl	8000568 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	3301      	adds	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d9e5      	bls.n	80006ac <ssd1306_UpdateScreen+0xc>
    }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000100 	.word	0x20000100

080006f0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	460b      	mov	r3, r1
 80006fc:	71bb      	strb	r3, [r7, #6]
 80006fe:	4613      	mov	r3, r2
 8000700:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db3d      	blt.n	8000786 <ssd1306_DrawPixel+0x96>
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b3f      	cmp	r3, #63	@ 0x3f
 800070e:	d83a      	bhi.n	8000786 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d11a      	bne.n	800074c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	b2d8      	uxtb	r0, r3
 800071e:	4603      	mov	r3, r0
 8000720:	01db      	lsls	r3, r3, #7
 8000722:	4413      	add	r3, r2
 8000724:	4a1a      	ldr	r2, [pc, #104]	@ (8000790 <ssd1306_DrawPixel+0xa0>)
 8000726:	5cd3      	ldrb	r3, [r2, r3]
 8000728:	b25a      	sxtb	r2, r3
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	f003 0307 	and.w	r3, r3, #7
 8000730:	2101      	movs	r1, #1
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b259      	sxtb	r1, r3
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	4603      	mov	r3, r0
 8000740:	01db      	lsls	r3, r3, #7
 8000742:	4413      	add	r3, r2
 8000744:	b2c9      	uxtb	r1, r1
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <ssd1306_DrawPixel+0xa0>)
 8000748:	54d1      	strb	r1, [r2, r3]
 800074a:	e01d      	b.n	8000788 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	b2d8      	uxtb	r0, r3
 8000754:	4603      	mov	r3, r0
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	4413      	add	r3, r2
 800075a:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <ssd1306_DrawPixel+0xa0>)
 800075c:	5cd3      	ldrb	r3, [r2, r3]
 800075e:	b25a      	sxtb	r2, r3
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	4013      	ands	r3, r2
 8000774:	b259      	sxtb	r1, r3
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	4603      	mov	r3, r0
 800077a:	01db      	lsls	r3, r3, #7
 800077c:	4413      	add	r3, r2
 800077e:	b2c9      	uxtb	r1, r1
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <ssd1306_DrawPixel+0xa0>)
 8000782:	54d1      	strb	r1, [r2, r3]
 8000784:	e000      	b.n	8000788 <ssd1306_DrawPixel+0x98>
        return;
 8000786:	bf00      	nop
    }
}
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000100 	.word	0x20000100

08000794 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	@ 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4604      	mov	r4, r0
 800079c:	4638      	mov	r0, r7
 800079e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80007a2:	4623      	mov	r3, r4
 80007a4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d902      	bls.n	80007b2 <ssd1306_WriteChar+0x1e>
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80007b0:	d901      	bls.n	80007b6 <ssd1306_WriteChar+0x22>
        return 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e077      	b.n	80008a6 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80007b6:	4b3e      	ldr	r3, [pc, #248]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	783b      	ldrb	r3, [r7, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	2b80      	cmp	r3, #128	@ 0x80
 80007c2:	dc06      	bgt.n	80007d2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80007c4:	4b3a      	ldr	r3, [pc, #232]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 80007c6:	885b      	ldrh	r3, [r3, #2]
 80007c8:	461a      	mov	r2, r3
 80007ca:	787b      	ldrb	r3, [r7, #1]
 80007cc:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80007ce:	2b40      	cmp	r3, #64	@ 0x40
 80007d0:	dd01      	ble.n	80007d6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e067      	b.n	80008a6 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
 80007da:	e04e      	b.n	800087a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3b20      	subs	r3, #32
 80007e2:	7879      	ldrb	r1, [r7, #1]
 80007e4:	fb01 f303 	mul.w	r3, r1, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	440b      	add	r3, r1
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	e036      	b.n	800086a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d013      	beq.n	8000834 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4413      	add	r3, r2
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 800081c:	885b      	ldrh	r3, [r3, #2]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4413      	add	r3, r2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800082c:	4619      	mov	r1, r3
 800082e:	f7ff ff5f 	bl	80006f0 <ssd1306_DrawPixel>
 8000832:	e017      	b.n	8000864 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000834:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4413      	add	r3, r2
 8000840:	b2d8      	uxtb	r0, r3
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 8000844:	885b      	ldrh	r3, [r3, #2]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4413      	add	r3, r2
 800084e:	b2d9      	uxtb	r1, r3
 8000850:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	f7ff ff46 	bl	80006f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	3301      	adds	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	783b      	ldrb	r3, [r7, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4293      	cmp	r3, r2
 8000872:	d3c3      	bcc.n	80007fc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	3301      	adds	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	787b      	ldrb	r3, [r7, #1]
 800087c:	461a      	mov	r2, r3
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	4293      	cmp	r3, r2
 8000882:	d3ab      	bcc.n	80007dc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	2a00      	cmp	r2, #0
 800088c:	d005      	beq.n	800089a <ssd1306_WriteChar+0x106>
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	3a20      	subs	r2, #32
 8000894:	440a      	add	r2, r1
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	e000      	b.n	800089c <ssd1306_WriteChar+0x108>
 800089a:	783a      	ldrb	r2, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <ssd1306_WriteChar+0x11c>)
 80008a2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	@ 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000500 	.word	0x20000500

080008b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	4638      	mov	r0, r7
 80008be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80008c2:	e013      	b.n	80008ec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	7818      	ldrb	r0, [r3, #0]
 80008c8:	7e3b      	ldrb	r3, [r7, #24]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	463b      	mov	r3, r7
 80008ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d0:	f7ff ff60 	bl	8000794 <ssd1306_WriteChar>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d002      	beq.n	80008e6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	e008      	b.n	80008f8 <ssd1306_WriteString+0x44>
        }
        str++;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e7      	bne.n	80008c4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	781b      	ldrb	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <ssd1306_SetCursor+0x2c>)
 8000916:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <ssd1306_SetCursor+0x2c>)
 800091e:	805a      	strh	r2, [r3, #2]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000500 	.word	0x20000500

08000930 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800093a:	2381      	movs	r3, #129	@ 0x81
 800093c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fdf9 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdf5 	bl	8000538 <ssd1306_WriteCommand>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000968:	23af      	movs	r3, #175	@ 0xaf
 800096a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <ssd1306_SetDisplayOn+0x38>)
 800096e:	2201      	movs	r2, #1
 8000970:	715a      	strb	r2, [r3, #5]
 8000972:	e004      	b.n	800097e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000974:	23ae      	movs	r3, #174	@ 0xae
 8000976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <ssd1306_SetDisplayOn+0x38>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fdd9 	bl	8000538 <ssd1306_WriteCommand>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000500 	.word	0x20000500

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_MspInit+0x5c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a14      	ldr	r2, [pc, #80]	@ (80009f0 <HAL_MspInit+0x5c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_MspInit+0x5c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <HAL_MspInit+0x5c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_MspInit+0x60>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_MspInit+0x60>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010000 	.word	0x40010000

080009f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <HAL_ADC_MspInit+0x7c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d129      	bne.n	8000a6c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a16      	ldr	r2, [pc, #88]	@ (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a10      	ldr	r2, [pc, #64]	@ (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_ADC_MspInit+0x80>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <HAL_ADC_MspInit+0x84>)
 8000a58:	f000 fd70 	bl	800153c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2012      	movs	r0, #18
 8000a62:	f000 fd34 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a66:	2012      	movs	r0, #18
 8000a68:	f000 fd4d 	bl	8001506 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40012400 	.word	0x40012400
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010800 	.word	0x40010800

08000a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a15      	ldr	r2, [pc, #84]	@ (8000af0 <HAL_I2C_MspInit+0x70>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d123      	bne.n	8000ae8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_I2C_MspInit+0x74>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <HAL_I2C_MspInit+0x74>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <HAL_I2C_MspInit+0x74>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab8:	23c0      	movs	r3, #192	@ 0xc0
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <HAL_I2C_MspInit+0x78>)
 8000acc:	f000 fd36 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_I2C_MspInit+0x74>)
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_I2C_MspInit+0x74>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ada:	61d3      	str	r3, [r2, #28]
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_I2C_MspInit+0x74>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f8bc 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <ADC1_2_IRQHandler+0x10>)
 8000b5a:	f000 f9cd 	bl	8000ef8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000078 	.word	0x20000078

08000b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(tilt_Pin);
 8000b6c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b70:	f000 fe80 	bl	8001874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 f81c 	bl	8002be4 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20005000 	.word	0x20005000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000508 	.word	0x20000508
 8000be0:	20000658 	.word	0x20000658

08000be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff fff8 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bf6:	490c      	ldr	r1, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a09      	ldr	r2, [pc, #36]	@ (8000c30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c0c:	4c09      	ldr	r4, [pc, #36]	@ (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 ffe9 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff faa7 	bl	8000170 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c2c:	080042c8 	.word	0x080042c8
  ldr r2, =_sbss
 8000c30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c34:	20000658 	.word	0x20000658

08000c38 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <CAN1_RX1_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 fc33 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe9c 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fc4b 	bl	8001522 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 fc13 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a03      	ldr	r2, [pc, #12]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	2000050c 	.word	0x2000050c

08000cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b02      	ldr	r3, [pc, #8]	@ (8000cfc <HAL_GetTick+0x10>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	2000050c 	.word	0x2000050c

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff fff0 	bl	8000cec <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffe0 	bl	8000cec <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008

08000d48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0be      	b.n	8000ee8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe36 	bl	80009f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 fa7d 	bl	800128c <ADC_ConversionStop_Disable>
 8000d92:	4603      	mov	r3, r0
 8000d94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8099 	bne.w	8000ed6 <HAL_ADC_Init+0x18e>
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8095 	bne.w	8000ed6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000db4:	f023 0302 	bic.w	r3, r3, #2
 8000db8:	f043 0202 	orr.w	r2, r3, #2
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7b1b      	ldrb	r3, [r3, #12]
 8000dce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000de0:	d003      	beq.n	8000dea <HAL_ADC_Init+0xa2>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d102      	bne.n	8000df0 <HAL_ADC_Init+0xa8>
 8000dea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dee:	e000      	b.n	8000df2 <HAL_ADC_Init+0xaa>
 8000df0:	2300      	movs	r3, #0
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7d1b      	ldrb	r3, [r3, #20]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d119      	bne.n	8000e34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7b1b      	ldrb	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d109      	bne.n	8000e1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	035a      	lsls	r2, r3, #13
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	e00b      	b.n	8000e34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e20:	f043 0220 	orr.w	r2, r3, #32
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <HAL_ADC_Init+0x1a8>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e64:	d003      	beq.n	8000e6e <HAL_ADC_Init+0x126>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d104      	bne.n	8000e78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	051b      	lsls	r3, r3, #20
 8000e76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_ADC_Init+0x1ac>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb2:	e018      	b.n	8000ee6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb8:	f023 0312 	bic.w	r3, r3, #18
 8000ebc:	f043 0210 	orr.w	r2, r3, #16
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec8:	f043 0201 	orr.w	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ed4:	e007      	b.n	8000ee6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eda:	f043 0210 	orr.w	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ef4:	ff1f0efe 	.word	0xff1f0efe

08000ef8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d03e      	beq.n	8000f98 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d039      	beq.n	8000f98 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f46:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f4a:	d11d      	bne.n	8000f88 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d119      	bne.n	8000f88 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0220 	bic.w	r2, r2, #32
 8000f62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f874 	bl	8001076 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f06f 0212 	mvn.w	r2, #18
 8000f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d04d      	beq.n	800103e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d048      	beq.n	800103e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000fce:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000fd2:	d012      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d125      	bne.n	800102e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fec:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ff0:	d11d      	bne.n	800102e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d119      	bne.n	800102e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001008:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001026:	f043 0201 	orr.w	r2, r3, #1
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f96d 	bl	800130e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f06f 020c 	mvn.w	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	d012      	beq.n	800106e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00d      	beq.n	800106e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001056:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f812 	bl	8001088 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f06f 0201 	mvn.w	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x20>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e0dc      	b.n	8001276 <HAL_ADC_ConfigChannel+0x1da>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d81c      	bhi.n	8001106 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b05      	subs	r3, #5
 80010de:	221f      	movs	r2, #31
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4019      	ands	r1, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3b05      	subs	r3, #5
 80010f8:	fa00 f203 	lsl.w	r2, r0, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34
 8001104:	e03c      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d81c      	bhi.n	8001148 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	3b23      	subs	r3, #35	@ 0x23
 8001120:	221f      	movs	r2, #31
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	4019      	ands	r1, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	3b23      	subs	r3, #35	@ 0x23
 800113a:	fa00 f203 	lsl.w	r2, r0, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
 8001146:	e01b      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	3b41      	subs	r3, #65	@ 0x41
 800115a:	221f      	movs	r2, #31
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	4019      	ands	r1, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b41      	subs	r3, #65	@ 0x41
 8001174:	fa00 f203 	lsl.w	r2, r0, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d91c      	bls.n	80011c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68d9      	ldr	r1, [r3, #12]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	3b1e      	subs	r3, #30
 800119a:	2207      	movs	r2, #7
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4019      	ands	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	3b1e      	subs	r3, #30
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	e019      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6919      	ldr	r1, [r3, #16]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	2207      	movs	r2, #7
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d003      	beq.n	8001206 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001202:	2b11      	cmp	r3, #17
 8001204:	d132      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <HAL_ADC_ConfigChannel+0x1e4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d125      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d126      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800122c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d11a      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_ADC_ConfigChannel+0x1e8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <HAL_ADC_ConfigChannel+0x1ec>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9a      	lsrs	r2, r3, #18
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800124c:	e002      	b.n	8001254 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3b01      	subs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f9      	bne.n	800124e <HAL_ADC_ConfigChannel+0x1b2>
 800125a:	e007      	b.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001260:	f043 0220 	orr.w	r2, r3, #32
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40012400 	.word	0x40012400
 8001284:	20000000 	.word	0x20000000
 8001288:	431bde83 	.word	0x431bde83

0800128c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d12e      	bne.n	8001304 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012b6:	f7ff fd19 	bl	8000cec <HAL_GetTick>
 80012ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012bc:	e01b      	b.n	80012f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012be:	f7ff fd15 	bl	8000cec <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d914      	bls.n	80012f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10d      	bne.n	80012f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e007      	b.n	8001306 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b01      	cmp	r3, #1
 8001302:	d0dc      	beq.n	80012be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4906      	ldr	r1, [pc, #24]	@ (80013b8 <__NVIC_EnableIRQ+0x34>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2d 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff42 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff35 	bl	8001384 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b08b      	sub	sp, #44	@ 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	e169      	b.n	8001824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001550:	2201      	movs	r2, #1
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8158 	bne.w	800181e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a9a      	ldr	r2, [pc, #616]	@ (80017dc <HAL_GPIO_Init+0x2a0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d05e      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001578:	4a98      	ldr	r2, [pc, #608]	@ (80017dc <HAL_GPIO_Init+0x2a0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d875      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800157e:	4a98      	ldr	r2, [pc, #608]	@ (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d058      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001584:	4a96      	ldr	r2, [pc, #600]	@ (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d86f      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800158a:	4a96      	ldr	r2, [pc, #600]	@ (80017e4 <HAL_GPIO_Init+0x2a8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d052      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001590:	4a94      	ldr	r2, [pc, #592]	@ (80017e4 <HAL_GPIO_Init+0x2a8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d869      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 8001596:	4a94      	ldr	r2, [pc, #592]	@ (80017e8 <HAL_GPIO_Init+0x2ac>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04c      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 800159c:	4a92      	ldr	r2, [pc, #584]	@ (80017e8 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d863      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015a2:	4a92      	ldr	r2, [pc, #584]	@ (80017ec <HAL_GPIO_Init+0x2b0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d046      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 80015a8:	4a90      	ldr	r2, [pc, #576]	@ (80017ec <HAL_GPIO_Init+0x2b0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d85d      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d82a      	bhi.n	8001608 <HAL_GPIO_Init+0xcc>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d859      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015b6:	a201      	add	r2, pc, #4	@ (adr r2, 80015bc <HAL_GPIO_Init+0x80>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001623 	.word	0x08001623
 80015c8:	08001665 	.word	0x08001665
 80015cc:	0800166b 	.word	0x0800166b
 80015d0:	0800166b 	.word	0x0800166b
 80015d4:	0800166b 	.word	0x0800166b
 80015d8:	0800166b 	.word	0x0800166b
 80015dc:	0800166b 	.word	0x0800166b
 80015e0:	0800166b 	.word	0x0800166b
 80015e4:	0800166b 	.word	0x0800166b
 80015e8:	0800166b 	.word	0x0800166b
 80015ec:	0800166b 	.word	0x0800166b
 80015f0:	0800166b 	.word	0x0800166b
 80015f4:	0800166b 	.word	0x0800166b
 80015f8:	0800166b 	.word	0x0800166b
 80015fc:	0800166b 	.word	0x0800166b
 8001600:	08001619 	.word	0x08001619
 8001604:	0800162d 	.word	0x0800162d
 8001608:	4a79      	ldr	r2, [pc, #484]	@ (80017f0 <HAL_GPIO_Init+0x2b4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160e:	e02c      	b.n	800166a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e029      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e024      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	3308      	adds	r3, #8
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e01f      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e01a      	b.n	800166c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163e:	2304      	movs	r3, #4
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e013      	b.n	800166c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	611a      	str	r2, [r3, #16]
          break;
 8001656:	e009      	b.n	800166c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	615a      	str	r2, [r3, #20]
          break;
 8001662:	e003      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x130>
          break;
 800166a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2bff      	cmp	r3, #255	@ 0xff
 8001670:	d801      	bhi.n	8001676 <HAL_GPIO_Init+0x13a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	e001      	b.n	800167a <HAL_GPIO_Init+0x13e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	@ 0xff
 8001680:	d802      	bhi.n	8001688 <HAL_GPIO_Init+0x14c>
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x152>
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	3b08      	subs	r3, #8
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	210f      	movs	r1, #15
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80b1 	beq.w	800181e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016bc:	4b4d      	ldr	r3, [pc, #308]	@ (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	@ (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b4a      	ldr	r3, [pc, #296]	@ (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d4:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a40      	ldr	r2, [pc, #256]	@ (80017fc <HAL_GPIO_Init+0x2c0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_GPIO_Init+0x1ec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <HAL_GPIO_Init+0x2c4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_Init+0x1e8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3e      	ldr	r2, [pc, #248]	@ (8001804 <HAL_GPIO_Init+0x2c8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x1e4>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3d      	ldr	r2, [pc, #244]	@ (8001808 <HAL_GPIO_Init+0x2cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_Init+0x1e0>
 8001718:	2303      	movs	r3, #3
 800171a:	e006      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 800171c:	2304      	movs	r3, #4
 800171e:	e004      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001720:	2302      	movs	r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001728:	2300      	movs	r3, #0
 800172a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173a:	492f      	ldr	r1, [pc, #188]	@ (80017f8 <HAL_GPIO_Init+0x2bc>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001754:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	492c      	ldr	r1, [pc, #176]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4928      	ldr	r1, [pc, #160]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177c:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4922      	ldr	r1, [pc, #136]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b20      	ldr	r3, [pc, #128]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	491e      	ldr	r1, [pc, #120]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4918      	ldr	r1, [pc, #96]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4914      	ldr	r1, [pc, #80]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d021      	beq.n	8001810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	490e      	ldr	r1, [pc, #56]	@ (800180c <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e021      	b.n	800181e <HAL_GPIO_Init+0x2e2>
 80017da:	bf00      	nop
 80017dc:	10320000 	.word	0x10320000
 80017e0:	10310000 	.word	0x10310000
 80017e4:	10220000 	.word	0x10220000
 80017e8:	10210000 	.word	0x10210000
 80017ec:	10120000 	.word	0x10120000
 80017f0:	10110000 	.word	0x10110000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40010c00 	.word	0x40010c00
 8001804:	40011000 	.word	0x40011000
 8001808:	40011400 	.word	0x40011400
 800180c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_GPIO_Init+0x304>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	4909      	ldr	r1, [pc, #36]	@ (8001840 <HAL_GPIO_Init+0x304>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f47f ae8e 	bne.w	8001550 <HAL_GPIO_Init+0x14>
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	372c      	adds	r7, #44	@ 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fc5a 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e12b      	b.n	8001b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff f8d8 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2224      	movs	r2, #36	@ 0x24
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001908:	f001 f842 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800190c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a81      	ldr	r2, [pc, #516]	@ (8001b18 <HAL_I2C_Init+0x274>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d807      	bhi.n	8001928 <HAL_I2C_Init+0x84>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a80      	ldr	r2, [pc, #512]	@ (8001b1c <HAL_I2C_Init+0x278>)
 800191c:	4293      	cmp	r3, r2
 800191e:	bf94      	ite	ls
 8001920:	2301      	movls	r3, #1
 8001922:	2300      	movhi	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	e006      	b.n	8001936 <HAL_I2C_Init+0x92>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b20 <HAL_I2C_Init+0x27c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	bf94      	ite	ls
 8001930:	2301      	movls	r3, #1
 8001932:	2300      	movhi	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0e7      	b.n	8001b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a78      	ldr	r2, [pc, #480]	@ (8001b24 <HAL_I2C_Init+0x280>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0c9b      	lsrs	r3, r3, #18
 8001948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b18 <HAL_I2C_Init+0x274>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d802      	bhi.n	8001978 <HAL_I2C_Init+0xd4>
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3301      	adds	r3, #1
 8001976:	e009      	b.n	800198c <HAL_I2C_Init+0xe8>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4a69      	ldr	r2, [pc, #420]	@ (8001b28 <HAL_I2C_Init+0x284>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	3301      	adds	r3, #1
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	430b      	orrs	r3, r1
 8001992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800199e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	495c      	ldr	r1, [pc, #368]	@ (8001b18 <HAL_I2C_Init+0x274>)
 80019a8:	428b      	cmp	r3, r1
 80019aa:	d819      	bhi.n	80019e0 <HAL_I2C_Init+0x13c>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e59      	subs	r1, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019c0:	400b      	ands	r3, r1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_I2C_Init+0x138>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e59      	subs	r1, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019da:	e051      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 80019dc:	2304      	movs	r3, #4
 80019de:	e04f      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d111      	bne.n	8001a0c <HAL_I2C_Init+0x168>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	440b      	add	r3, r1
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e012      	b.n	8001a32 <HAL_I2C_Init+0x18e>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e58      	subs	r0, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	0099      	lsls	r1, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Init+0x196>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e022      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10e      	bne.n	8001a60 <HAL_I2C_Init+0x1bc>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e58      	subs	r0, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	440b      	add	r3, r1
 8001a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a5e:	e00f      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	6809      	ldr	r1, [r1, #0]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6911      	ldr	r1, [r2, #16]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	000186a0 	.word	0x000186a0
 8001b1c:	001e847f 	.word	0x001e847f
 8001b20:	003d08ff 	.word	0x003d08ff
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	10624dd3 	.word	0x10624dd3

08001b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	817b      	strh	r3, [r7, #10]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	813b      	strh	r3, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b46:	f7ff f8d1 	bl	8000cec <HAL_GetTick>
 8001b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	f040 80d9 	bne.w	8001d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2319      	movs	r3, #25
 8001b60:	2201      	movs	r2, #1
 8001b62:	496d      	ldr	r1, [pc, #436]	@ (8001d18 <HAL_I2C_Mem_Write+0x1ec>)
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f971 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0cc      	b.n	8001d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_Mem_Write+0x56>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e0c5      	b.n	8001d0e <HAL_I2C_Mem_Write+0x1e2>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d007      	beq.n	8001ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2221      	movs	r2, #33	@ 0x21
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2240      	movs	r2, #64	@ 0x40
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a4d      	ldr	r2, [pc, #308]	@ (8001d1c <HAL_I2C_Mem_Write+0x1f0>)
 8001be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bea:	88f8      	ldrh	r0, [r7, #6]
 8001bec:	893a      	ldrh	r2, [r7, #8]
 8001bee:	8979      	ldrh	r1, [r7, #10]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f890 	bl	8001d20 <I2C_RequestMemoryWrite>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d052      	beq.n	8001cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e081      	b.n	8001d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa36 	bl	8002080 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d107      	bne.n	8001c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06b      	b.n	8001d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d11b      	bne.n	8001cac <HAL_I2C_Mem_Write+0x180>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1aa      	bne.n	8001c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fa29 	bl	8002110 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d107      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e016      	b.n	8001d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	00100002 	.word	0x00100002
 8001d1c:	ffff0000 	.word	0xffff0000

08001d20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	817b      	strh	r3, [r7, #10]
 8001d32:	460b      	mov	r3, r1
 8001d34:	813b      	strh	r3, [r7, #8]
 8001d36:	4613      	mov	r3, r2
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f878 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d70:	d103      	bne.n	8001d7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e05f      	b.n	8001e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	492d      	ldr	r1, [pc, #180]	@ (8001e48 <I2C_RequestMemoryWrite+0x128>)
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f8d3 	bl	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e04c      	b.n	8001e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbc:	6a39      	ldr	r1, [r7, #32]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f95e 	bl	8002080 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d107      	bne.n	8001de2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e02b      	b.n	8001e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dec:	893b      	ldrh	r3, [r7, #8]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	e021      	b.n	8001e3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f938 	bl	8002080 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d107      	bne.n	8001e2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e005      	b.n	8001e3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e32:	893b      	ldrh	r3, [r7, #8]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	00010002 	.word	0x00010002

08001e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e5c:	e048      	b.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d044      	beq.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e66:	f7fe ff41 	bl	8000cec <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d139      	bne.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	0c1b      	lsrs	r3, r3, #16
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10d      	bne.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	e00c      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d116      	bne.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e023      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	0c1b      	lsrs	r3, r3, #16
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10d      	bne.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	e00c      	b.n	8001f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d093      	beq.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f4e:	e071      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5e:	d123      	bne.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e067      	b.n	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d041      	beq.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb0:	f7fe fe9c 	bl	8000cec <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d302      	bcc.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d136      	bne.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e00b      	b.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e021      	b.n	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10c      	bne.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	43da      	mvns	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e00b      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f af6d 	bne.w	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208c:	e034      	b.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f886 	bl	80021a0 <I2C_IsAcknowledgeFailed>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e034      	b.n	8002108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d028      	beq.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a6:	f7fe fe21 	bl	8000cec <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11d      	bne.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	2b80      	cmp	r3, #128	@ 0x80
 80020c8:	d016      	beq.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e007      	b.n	8002108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	2b80      	cmp	r3, #128	@ 0x80
 8002104:	d1c3      	bne.n	800208e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800211c:	e034      	b.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f83e 	bl	80021a0 <I2C_IsAcknowledgeFailed>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e034      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d028      	beq.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7fe fdd9 	bl	8000cec <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11d      	bne.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d016      	beq.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d1c3      	bne.n	800211e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b6:	d11b      	bne.n	80021f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e272      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8087 	beq.w	800232a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800221c:	4b92      	ldr	r3, [pc, #584]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d00c      	beq.n	8002242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002228:	4b8f      	ldr	r3, [pc, #572]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d112      	bne.n	800225a <HAL_RCC_OscConfig+0x5e>
 8002234:	4b8c      	ldr	r3, [pc, #560]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b89      	ldr	r3, [pc, #548]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d06c      	beq.n	8002328 <HAL_RCC_OscConfig+0x12c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d168      	bne.n	8002328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e24c      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x76>
 8002264:	4b80      	ldr	r3, [pc, #512]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7f      	ldr	r2, [pc, #508]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e02e      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x98>
 800227a:	4b7b      	ldr	r3, [pc, #492]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7a      	ldr	r2, [pc, #488]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b78      	ldr	r3, [pc, #480]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a77      	ldr	r2, [pc, #476]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0xbc>
 800229e:	4b72      	ldr	r3, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a71      	ldr	r2, [pc, #452]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 80022b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b68      	ldr	r3, [pc, #416]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a67      	ldr	r2, [pc, #412]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fd08 	bl	8000cec <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe fd04 	bl	8000cec <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e200      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe4>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fcf4 	bl	8000cec <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fcf0 	bl	8000cec <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	@ 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1ec      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x10c>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002336:	4b4c      	ldr	r3, [pc, #304]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002342:	4b49      	ldr	r3, [pc, #292]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x18c>
 800234e:	4b46      	ldr	r3, [pc, #280]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x176>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1c0      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3d      	ldr	r3, [pc, #244]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4939      	ldr	r1, [pc, #228]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <HAL_RCC_OscConfig+0x270>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fca9 	bl	8000cec <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe fca5 	bl	8000cec <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a1      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4927      	ldr	r1, [pc, #156]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b26      	ldr	r3, [pc, #152]	@ (800246c <HAL_RCC_OscConfig+0x270>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fc88 	bl	8000cec <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fc84 	bl	8000cec <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e180      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d03a      	beq.n	8002480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_RCC_OscConfig+0x274>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe fc68 	bl	8000cec <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fc64 	bl	8000cec <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e160      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243e:	2001      	movs	r0, #1
 8002440:	f000 faba 	bl	80029b8 <RCC_Delay>
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_RCC_OscConfig+0x274>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe fc4e 	bl	8000cec <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002452:	e00f      	b.n	8002474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fc4a 	bl	8000cec <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d908      	bls.n	8002474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e146      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	42420000 	.word	0x42420000
 8002470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b92      	ldr	r3, [pc, #584]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e9      	bne.n	8002454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a6 	beq.w	80025da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b8b      	ldr	r3, [pc, #556]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4b88      	ldr	r3, [pc, #544]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a87      	ldr	r2, [pc, #540]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b85      	ldr	r3, [pc, #532]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b82      	ldr	r3, [pc, #520]	@ (80026c4 <HAL_RCC_OscConfig+0x4c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b7f      	ldr	r3, [pc, #508]	@ (80026c4 <HAL_RCC_OscConfig+0x4c8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7e      	ldr	r2, [pc, #504]	@ (80026c4 <HAL_RCC_OscConfig+0x4c8>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fc0b 	bl	8000cec <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fc07 	bl	8000cec <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	@ 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e103      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b75      	ldr	r3, [pc, #468]	@ (80026c4 <HAL_RCC_OscConfig+0x4c8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x312>
 8002500:	4b6f      	ldr	r3, [pc, #444]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e02d      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x334>
 8002516:	4b6a      	ldr	r3, [pc, #424]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a69      	ldr	r2, [pc, #420]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b67      	ldr	r3, [pc, #412]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a66      	ldr	r2, [pc, #408]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	e01c      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d10c      	bne.n	8002552 <HAL_RCC_OscConfig+0x356>
 8002538:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a60      	ldr	r2, [pc, #384]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	4b5e      	ldr	r3, [pc, #376]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a5d      	ldr	r2, [pc, #372]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	e00b      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 8002552:	4b5b      	ldr	r3, [pc, #364]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a5a      	ldr	r2, [pc, #360]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	4b58      	ldr	r3, [pc, #352]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a57      	ldr	r2, [pc, #348]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d015      	beq.n	800259e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7fe fbbb 	bl	8000cec <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fbb7 	bl	8000cec <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0b1      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b4b      	ldr	r3, [pc, #300]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ee      	beq.n	800257a <HAL_RCC_OscConfig+0x37e>
 800259c:	e014      	b.n	80025c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fba5 	bl	8000cec <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7fe fba1 	bl	8000cec <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e09b      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	4b40      	ldr	r3, [pc, #256]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ee      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ce:	4b3c      	ldr	r3, [pc, #240]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a3b      	ldr	r2, [pc, #236]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8087 	beq.w	80026f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e4:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d061      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d146      	bne.n	8002686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b33      	ldr	r3, [pc, #204]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe fb75 	bl	8000cec <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fb71 	bl	8000cec <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e06d      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	4b29      	ldr	r3, [pc, #164]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d108      	bne.n	8002640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262e:	4b24      	ldr	r3, [pc, #144]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4921      	ldr	r1, [pc, #132]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002640:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a19      	ldr	r1, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	430b      	orrs	r3, r1
 8002652:	491b      	ldr	r1, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fb45 	bl	8000cec <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fb41 	bl	8000cec <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e03d      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x46a>
 8002684:	e035      	b.n	80026f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fb2e 	bl	8000cec <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fb2a 	bl	8000cec <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e026      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x498>
 80026b2:	e01e      	b.n	80026f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e019      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
 80026c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_OscConfig+0x500>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d0      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4965      	ldr	r1, [pc, #404]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b63      	ldr	r3, [pc, #396]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b8      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b59      	ldr	r3, [pc, #356]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a58      	ldr	r2, [pc, #352]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002774:	4b53      	ldr	r3, [pc, #332]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a52      	ldr	r2, [pc, #328]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800277e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b50      	ldr	r3, [pc, #320]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	494d      	ldr	r1, [pc, #308]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d040      	beq.n	8002820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b47      	ldr	r3, [pc, #284]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b41      	ldr	r3, [pc, #260]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e073      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4936      	ldr	r1, [pc, #216]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f0:	f7fe fa7c 	bl	8000cec <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7fe fa78 	bl	8000cec <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e053      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d210      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4922      	ldr	r1, [pc, #136]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e032      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4916      	ldr	r1, [pc, #88]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	490e      	ldr	r1, [pc, #56]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288e:	f000 f821 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	490a      	ldr	r1, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	5ccb      	ldrb	r3, [r1, r3]
 80028a2:	fa22 f303 	lsr.w	r3, r2, r3
 80028a6:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <HAL_RCC_ClockConfig+0x1cc>)
 80028a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_ClockConfig+0x1d0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f9da 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004260 	.word	0x08004260
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x30>
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x36>
 8002902:	e027      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_RCC_GetSysClockFreq+0x98>)
 8002906:	613b      	str	r3, [r7, #16]
      break;
 8002908:	e027      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002922:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x94>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0c5b      	lsrs	r3, r3, #17
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	4a11      	ldr	r2, [pc, #68]	@ (8002974 <HAL_RCC_GetSysClockFreq+0xa0>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0d      	ldr	r2, [pc, #52]	@ (800296c <HAL_RCC_GetSysClockFreq+0x98>)
 8002936:	fb03 f202 	mul.w	r2, r3, r2
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	e004      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0c      	ldr	r2, [pc, #48]	@ (8002978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	613b      	str	r3, [r7, #16]
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetSysClockFreq+0x98>)
 8002956:	613b      	str	r3, [r7, #16]
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	693b      	ldr	r3, [r7, #16]
}
 800295c:	4618      	mov	r0, r3
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	007a1200 	.word	0x007a1200
 8002970:	08004278 	.word	0x08004278
 8002974:	08004288 	.word	0x08004288
 8002978:	003d0900 	.word	0x003d0900

0800297c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b02      	ldr	r3, [pc, #8]	@ (800298c <HAL_RCC_GetHCLKFreq+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002994:	f7ff fff2 	bl	800297c <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08004270 	.word	0x08004270

080029b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029c0:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <RCC_Delay+0x34>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <RCC_Delay+0x38>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a5b      	lsrs	r3, r3, #9
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d4:	bf00      	nop
  }
  while (Delay --);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	60fa      	str	r2, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f9      	bne.n	80029d4 <RCC_Delay+0x1c>
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000000 	.word	0x20000000
 80029f0:	10624dd3 	.word	0x10624dd3

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d07d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a14:	4b4f      	ldr	r3, [pc, #316]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b4c      	ldr	r3, [pc, #304]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	61d3      	str	r3, [r2, #28]
 8002a2c:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b46      	ldr	r3, [pc, #280]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d118      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a48:	4b43      	ldr	r3, [pc, #268]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a54:	f7fe f94a 	bl	8000cec <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	e008      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5c:	f7fe f946 	bl	8000cec <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e06d      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a7a:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02e      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d027      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a98:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aae:	4a29      	ldr	r2, [pc, #164]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d014      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe f915 	bl	8000cec <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe f911 	bl	8000cec <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e036      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4917      	ldr	r1, [pc, #92]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	490b      	ldr	r1, [pc, #44]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b36:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4904      	ldr	r1, [pc, #16]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42420440 	.word	0x42420440

08002b60 <siprintf>:
 8002b60:	b40e      	push	{r1, r2, r3}
 8002b62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b66:	b500      	push	{lr}
 8002b68:	b09c      	sub	sp, #112	@ 0x70
 8002b6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b6c:	9002      	str	r0, [sp, #8]
 8002b6e:	9006      	str	r0, [sp, #24]
 8002b70:	9107      	str	r1, [sp, #28]
 8002b72:	9104      	str	r1, [sp, #16]
 8002b74:	4808      	ldr	r0, [pc, #32]	@ (8002b98 <siprintf+0x38>)
 8002b76:	4909      	ldr	r1, [pc, #36]	@ (8002b9c <siprintf+0x3c>)
 8002b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b7c:	9105      	str	r1, [sp, #20]
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	a902      	add	r1, sp, #8
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	f000 f9ba 	bl	8002efc <_svfiprintf_r>
 8002b88:	2200      	movs	r2, #0
 8002b8a:	9b02      	ldr	r3, [sp, #8]
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	b01c      	add	sp, #112	@ 0x70
 8002b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b94:	b003      	add	sp, #12
 8002b96:	4770      	bx	lr
 8002b98:	2000000c 	.word	0x2000000c
 8002b9c:	ffff0208 	.word	0xffff0208

08002ba0 <memmove>:
 8002ba0:	4288      	cmp	r0, r1
 8002ba2:	b510      	push	{r4, lr}
 8002ba4:	eb01 0402 	add.w	r4, r1, r2
 8002ba8:	d902      	bls.n	8002bb0 <memmove+0x10>
 8002baa:	4284      	cmp	r4, r0
 8002bac:	4623      	mov	r3, r4
 8002bae:	d807      	bhi.n	8002bc0 <memmove+0x20>
 8002bb0:	1e43      	subs	r3, r0, #1
 8002bb2:	42a1      	cmp	r1, r4
 8002bb4:	d008      	beq.n	8002bc8 <memmove+0x28>
 8002bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bbe:	e7f8      	b.n	8002bb2 <memmove+0x12>
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	4402      	add	r2, r0
 8002bc4:	428a      	cmp	r2, r1
 8002bc6:	d100      	bne.n	8002bca <memmove+0x2a>
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002bd2:	e7f7      	b.n	8002bc4 <memmove+0x24>

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <__errno>:
 8002be4:	4b01      	ldr	r3, [pc, #4]	@ (8002bec <__errno+0x8>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	2000000c 	.word	0x2000000c

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	4d0c      	ldr	r5, [pc, #48]	@ (8002c28 <__libc_init_array+0x38>)
 8002bf6:	4c0d      	ldr	r4, [pc, #52]	@ (8002c2c <__libc_init_array+0x3c>)
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	f000 fc5e 	bl	80034c0 <_init>
 8002c04:	2600      	movs	r6, #0
 8002c06:	4d0a      	ldr	r5, [pc, #40]	@ (8002c30 <__libc_init_array+0x40>)
 8002c08:	4c0a      	ldr	r4, [pc, #40]	@ (8002c34 <__libc_init_array+0x44>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	080042c0 	.word	0x080042c0
 8002c2c:	080042c0 	.word	0x080042c0
 8002c30:	080042c0 	.word	0x080042c0
 8002c34:	080042c4 	.word	0x080042c4

08002c38 <__retarget_lock_acquire_recursive>:
 8002c38:	4770      	bx	lr

08002c3a <__retarget_lock_release_recursive>:
 8002c3a:	4770      	bx	lr

08002c3c <memcpy>:
 8002c3c:	440a      	add	r2, r1
 8002c3e:	4291      	cmp	r1, r2
 8002c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c44:	d100      	bne.n	8002c48 <memcpy+0xc>
 8002c46:	4770      	bx	lr
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c4e:	4291      	cmp	r1, r2
 8002c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c54:	d1f9      	bne.n	8002c4a <memcpy+0xe>
 8002c56:	bd10      	pop	{r4, pc}

08002c58 <_free_r>:
 8002c58:	b538      	push	{r3, r4, r5, lr}
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	2900      	cmp	r1, #0
 8002c5e:	d040      	beq.n	8002ce2 <_free_r+0x8a>
 8002c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c64:	1f0c      	subs	r4, r1, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bfb8      	it	lt
 8002c6a:	18e4      	addlt	r4, r4, r3
 8002c6c:	f000 f8de 	bl	8002e2c <__malloc_lock>
 8002c70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce4 <_free_r+0x8c>)
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	b933      	cbnz	r3, 8002c84 <_free_r+0x2c>
 8002c76:	6063      	str	r3, [r4, #4]
 8002c78:	6014      	str	r4, [r2, #0]
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c80:	f000 b8da 	b.w	8002e38 <__malloc_unlock>
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d908      	bls.n	8002c9a <_free_r+0x42>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	1821      	adds	r1, r4, r0
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	bf01      	itttt	eq
 8002c90:	6819      	ldreq	r1, [r3, #0]
 8002c92:	685b      	ldreq	r3, [r3, #4]
 8002c94:	1809      	addeq	r1, r1, r0
 8002c96:	6021      	streq	r1, [r4, #0]
 8002c98:	e7ed      	b.n	8002c76 <_free_r+0x1e>
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	b10b      	cbz	r3, 8002ca4 <_free_r+0x4c>
 8002ca0:	42a3      	cmp	r3, r4
 8002ca2:	d9fa      	bls.n	8002c9a <_free_r+0x42>
 8002ca4:	6811      	ldr	r1, [r2, #0]
 8002ca6:	1850      	adds	r0, r2, r1
 8002ca8:	42a0      	cmp	r0, r4
 8002caa:	d10b      	bne.n	8002cc4 <_free_r+0x6c>
 8002cac:	6820      	ldr	r0, [r4, #0]
 8002cae:	4401      	add	r1, r0
 8002cb0:	1850      	adds	r0, r2, r1
 8002cb2:	4283      	cmp	r3, r0
 8002cb4:	6011      	str	r1, [r2, #0]
 8002cb6:	d1e0      	bne.n	8002c7a <_free_r+0x22>
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4408      	add	r0, r1
 8002cbe:	6010      	str	r0, [r2, #0]
 8002cc0:	6053      	str	r3, [r2, #4]
 8002cc2:	e7da      	b.n	8002c7a <_free_r+0x22>
 8002cc4:	d902      	bls.n	8002ccc <_free_r+0x74>
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	602b      	str	r3, [r5, #0]
 8002cca:	e7d6      	b.n	8002c7a <_free_r+0x22>
 8002ccc:	6820      	ldr	r0, [r4, #0]
 8002cce:	1821      	adds	r1, r4, r0
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	bf01      	itttt	eq
 8002cd4:	6819      	ldreq	r1, [r3, #0]
 8002cd6:	685b      	ldreq	r3, [r3, #4]
 8002cd8:	1809      	addeq	r1, r1, r0
 8002cda:	6021      	streq	r1, [r4, #0]
 8002cdc:	6063      	str	r3, [r4, #4]
 8002cde:	6054      	str	r4, [r2, #4]
 8002ce0:	e7cb      	b.n	8002c7a <_free_r+0x22>
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	20000654 	.word	0x20000654

08002ce8 <sbrk_aligned>:
 8002ce8:	b570      	push	{r4, r5, r6, lr}
 8002cea:	4e0f      	ldr	r6, [pc, #60]	@ (8002d28 <sbrk_aligned+0x40>)
 8002cec:	460c      	mov	r4, r1
 8002cee:	6831      	ldr	r1, [r6, #0]
 8002cf0:	4605      	mov	r5, r0
 8002cf2:	b911      	cbnz	r1, 8002cfa <sbrk_aligned+0x12>
 8002cf4:	f000 fb90 	bl	8003418 <_sbrk_r>
 8002cf8:	6030      	str	r0, [r6, #0]
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	f000 fb8b 	bl	8003418 <_sbrk_r>
 8002d02:	1c43      	adds	r3, r0, #1
 8002d04:	d103      	bne.n	8002d0e <sbrk_aligned+0x26>
 8002d06:	f04f 34ff 	mov.w	r4, #4294967295
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	1cc4      	adds	r4, r0, #3
 8002d10:	f024 0403 	bic.w	r4, r4, #3
 8002d14:	42a0      	cmp	r0, r4
 8002d16:	d0f8      	beq.n	8002d0a <sbrk_aligned+0x22>
 8002d18:	1a21      	subs	r1, r4, r0
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f000 fb7c 	bl	8003418 <_sbrk_r>
 8002d20:	3001      	adds	r0, #1
 8002d22:	d1f2      	bne.n	8002d0a <sbrk_aligned+0x22>
 8002d24:	e7ef      	b.n	8002d06 <sbrk_aligned+0x1e>
 8002d26:	bf00      	nop
 8002d28:	20000650 	.word	0x20000650

08002d2c <_malloc_r>:
 8002d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d30:	1ccd      	adds	r5, r1, #3
 8002d32:	f025 0503 	bic.w	r5, r5, #3
 8002d36:	3508      	adds	r5, #8
 8002d38:	2d0c      	cmp	r5, #12
 8002d3a:	bf38      	it	cc
 8002d3c:	250c      	movcc	r5, #12
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	4606      	mov	r6, r0
 8002d42:	db01      	blt.n	8002d48 <_malloc_r+0x1c>
 8002d44:	42a9      	cmp	r1, r5
 8002d46:	d904      	bls.n	8002d52 <_malloc_r+0x26>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	6033      	str	r3, [r6, #0]
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e28 <_malloc_r+0xfc>
 8002d56:	f000 f869 	bl	8002e2c <__malloc_lock>
 8002d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d5e:	461c      	mov	r4, r3
 8002d60:	bb44      	cbnz	r4, 8002db4 <_malloc_r+0x88>
 8002d62:	4629      	mov	r1, r5
 8002d64:	4630      	mov	r0, r6
 8002d66:	f7ff ffbf 	bl	8002ce8 <sbrk_aligned>
 8002d6a:	1c43      	adds	r3, r0, #1
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	d158      	bne.n	8002e22 <_malloc_r+0xf6>
 8002d70:	f8d8 4000 	ldr.w	r4, [r8]
 8002d74:	4627      	mov	r7, r4
 8002d76:	2f00      	cmp	r7, #0
 8002d78:	d143      	bne.n	8002e02 <_malloc_r+0xd6>
 8002d7a:	2c00      	cmp	r4, #0
 8002d7c:	d04b      	beq.n	8002e16 <_malloc_r+0xea>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	4639      	mov	r1, r7
 8002d82:	4630      	mov	r0, r6
 8002d84:	eb04 0903 	add.w	r9, r4, r3
 8002d88:	f000 fb46 	bl	8003418 <_sbrk_r>
 8002d8c:	4581      	cmp	r9, r0
 8002d8e:	d142      	bne.n	8002e16 <_malloc_r+0xea>
 8002d90:	6821      	ldr	r1, [r4, #0]
 8002d92:	4630      	mov	r0, r6
 8002d94:	1a6d      	subs	r5, r5, r1
 8002d96:	4629      	mov	r1, r5
 8002d98:	f7ff ffa6 	bl	8002ce8 <sbrk_aligned>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d03a      	beq.n	8002e16 <_malloc_r+0xea>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	442b      	add	r3, r5
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	f8d8 3000 	ldr.w	r3, [r8]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	bb62      	cbnz	r2, 8002e08 <_malloc_r+0xdc>
 8002dae:	f8c8 7000 	str.w	r7, [r8]
 8002db2:	e00f      	b.n	8002dd4 <_malloc_r+0xa8>
 8002db4:	6822      	ldr	r2, [r4, #0]
 8002db6:	1b52      	subs	r2, r2, r5
 8002db8:	d420      	bmi.n	8002dfc <_malloc_r+0xd0>
 8002dba:	2a0b      	cmp	r2, #11
 8002dbc:	d917      	bls.n	8002dee <_malloc_r+0xc2>
 8002dbe:	1961      	adds	r1, r4, r5
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	6025      	str	r5, [r4, #0]
 8002dc4:	bf18      	it	ne
 8002dc6:	6059      	strne	r1, [r3, #4]
 8002dc8:	6863      	ldr	r3, [r4, #4]
 8002dca:	bf08      	it	eq
 8002dcc:	f8c8 1000 	streq.w	r1, [r8]
 8002dd0:	5162      	str	r2, [r4, r5]
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f000 f82f 	bl	8002e38 <__malloc_unlock>
 8002dda:	f104 000b 	add.w	r0, r4, #11
 8002dde:	1d23      	adds	r3, r4, #4
 8002de0:	f020 0007 	bic.w	r0, r0, #7
 8002de4:	1ac2      	subs	r2, r0, r3
 8002de6:	bf1c      	itt	ne
 8002de8:	1a1b      	subne	r3, r3, r0
 8002dea:	50a3      	strne	r3, [r4, r2]
 8002dec:	e7af      	b.n	8002d4e <_malloc_r+0x22>
 8002dee:	6862      	ldr	r2, [r4, #4]
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	bf0c      	ite	eq
 8002df4:	f8c8 2000 	streq.w	r2, [r8]
 8002df8:	605a      	strne	r2, [r3, #4]
 8002dfa:	e7eb      	b.n	8002dd4 <_malloc_r+0xa8>
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	6864      	ldr	r4, [r4, #4]
 8002e00:	e7ae      	b.n	8002d60 <_malloc_r+0x34>
 8002e02:	463c      	mov	r4, r7
 8002e04:	687f      	ldr	r7, [r7, #4]
 8002e06:	e7b6      	b.n	8002d76 <_malloc_r+0x4a>
 8002e08:	461a      	mov	r2, r3
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	42a3      	cmp	r3, r4
 8002e0e:	d1fb      	bne.n	8002e08 <_malloc_r+0xdc>
 8002e10:	2300      	movs	r3, #0
 8002e12:	6053      	str	r3, [r2, #4]
 8002e14:	e7de      	b.n	8002dd4 <_malloc_r+0xa8>
 8002e16:	230c      	movs	r3, #12
 8002e18:	4630      	mov	r0, r6
 8002e1a:	6033      	str	r3, [r6, #0]
 8002e1c:	f000 f80c 	bl	8002e38 <__malloc_unlock>
 8002e20:	e794      	b.n	8002d4c <_malloc_r+0x20>
 8002e22:	6005      	str	r5, [r0, #0]
 8002e24:	e7d6      	b.n	8002dd4 <_malloc_r+0xa8>
 8002e26:	bf00      	nop
 8002e28:	20000654 	.word	0x20000654

08002e2c <__malloc_lock>:
 8002e2c:	4801      	ldr	r0, [pc, #4]	@ (8002e34 <__malloc_lock+0x8>)
 8002e2e:	f7ff bf03 	b.w	8002c38 <__retarget_lock_acquire_recursive>
 8002e32:	bf00      	nop
 8002e34:	2000064c 	.word	0x2000064c

08002e38 <__malloc_unlock>:
 8002e38:	4801      	ldr	r0, [pc, #4]	@ (8002e40 <__malloc_unlock+0x8>)
 8002e3a:	f7ff befe 	b.w	8002c3a <__retarget_lock_release_recursive>
 8002e3e:	bf00      	nop
 8002e40:	2000064c 	.word	0x2000064c

08002e44 <__ssputs_r>:
 8002e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	461f      	mov	r7, r3
 8002e4a:	688e      	ldr	r6, [r1, #8]
 8002e4c:	4682      	mov	sl, r0
 8002e4e:	42be      	cmp	r6, r7
 8002e50:	460c      	mov	r4, r1
 8002e52:	4690      	mov	r8, r2
 8002e54:	680b      	ldr	r3, [r1, #0]
 8002e56:	d82d      	bhi.n	8002eb4 <__ssputs_r+0x70>
 8002e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e60:	d026      	beq.n	8002eb0 <__ssputs_r+0x6c>
 8002e62:	6965      	ldr	r5, [r4, #20]
 8002e64:	6909      	ldr	r1, [r1, #16]
 8002e66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e6a:	eba3 0901 	sub.w	r9, r3, r1
 8002e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e72:	1c7b      	adds	r3, r7, #1
 8002e74:	444b      	add	r3, r9
 8002e76:	106d      	asrs	r5, r5, #1
 8002e78:	429d      	cmp	r5, r3
 8002e7a:	bf38      	it	cc
 8002e7c:	461d      	movcc	r5, r3
 8002e7e:	0553      	lsls	r3, r2, #21
 8002e80:	d527      	bpl.n	8002ed2 <__ssputs_r+0x8e>
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7ff ff52 	bl	8002d2c <_malloc_r>
 8002e88:	4606      	mov	r6, r0
 8002e8a:	b360      	cbz	r0, 8002ee6 <__ssputs_r+0xa2>
 8002e8c:	464a      	mov	r2, r9
 8002e8e:	6921      	ldr	r1, [r4, #16]
 8002e90:	f7ff fed4 	bl	8002c3c <memcpy>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	6126      	str	r6, [r4, #16]
 8002ea2:	444e      	add	r6, r9
 8002ea4:	6026      	str	r6, [r4, #0]
 8002ea6:	463e      	mov	r6, r7
 8002ea8:	6165      	str	r5, [r4, #20]
 8002eaa:	eba5 0509 	sub.w	r5, r5, r9
 8002eae:	60a5      	str	r5, [r4, #8]
 8002eb0:	42be      	cmp	r6, r7
 8002eb2:	d900      	bls.n	8002eb6 <__ssputs_r+0x72>
 8002eb4:	463e      	mov	r6, r7
 8002eb6:	4632      	mov	r2, r6
 8002eb8:	4641      	mov	r1, r8
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	f7ff fe70 	bl	8002ba0 <memmove>
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	68a3      	ldr	r3, [r4, #8]
 8002ec4:	1b9b      	subs	r3, r3, r6
 8002ec6:	60a3      	str	r3, [r4, #8]
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	4433      	add	r3, r6
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed2:	462a      	mov	r2, r5
 8002ed4:	f000 fabe 	bl	8003454 <_realloc_r>
 8002ed8:	4606      	mov	r6, r0
 8002eda:	2800      	cmp	r0, #0
 8002edc:	d1e0      	bne.n	8002ea0 <__ssputs_r+0x5c>
 8002ede:	4650      	mov	r0, sl
 8002ee0:	6921      	ldr	r1, [r4, #16]
 8002ee2:	f7ff feb9 	bl	8002c58 <_free_r>
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	f8ca 3000 	str.w	r3, [sl]
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef6:	81a3      	strh	r3, [r4, #12]
 8002ef8:	e7e9      	b.n	8002ece <__ssputs_r+0x8a>
	...

08002efc <_svfiprintf_r>:
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	4698      	mov	r8, r3
 8002f02:	898b      	ldrh	r3, [r1, #12]
 8002f04:	4607      	mov	r7, r0
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	460d      	mov	r5, r1
 8002f0a:	4614      	mov	r4, r2
 8002f0c:	b09d      	sub	sp, #116	@ 0x74
 8002f0e:	d510      	bpl.n	8002f32 <_svfiprintf_r+0x36>
 8002f10:	690b      	ldr	r3, [r1, #16]
 8002f12:	b973      	cbnz	r3, 8002f32 <_svfiprintf_r+0x36>
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	f7ff ff09 	bl	8002d2c <_malloc_r>
 8002f1a:	6028      	str	r0, [r5, #0]
 8002f1c:	6128      	str	r0, [r5, #16]
 8002f1e:	b930      	cbnz	r0, 8002f2e <_svfiprintf_r+0x32>
 8002f20:	230c      	movs	r3, #12
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	b01d      	add	sp, #116	@ 0x74
 8002f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2e:	2340      	movs	r3, #64	@ 0x40
 8002f30:	616b      	str	r3, [r5, #20]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f36:	2320      	movs	r3, #32
 8002f38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f3c:	2330      	movs	r3, #48	@ 0x30
 8002f3e:	f04f 0901 	mov.w	r9, #1
 8002f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80030e0 <_svfiprintf_r+0x1e4>
 8002f4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f4e:	4623      	mov	r3, r4
 8002f50:	469a      	mov	sl, r3
 8002f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f56:	b10a      	cbz	r2, 8002f5c <_svfiprintf_r+0x60>
 8002f58:	2a25      	cmp	r2, #37	@ 0x25
 8002f5a:	d1f9      	bne.n	8002f50 <_svfiprintf_r+0x54>
 8002f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8002f60:	d00b      	beq.n	8002f7a <_svfiprintf_r+0x7e>
 8002f62:	465b      	mov	r3, fp
 8002f64:	4622      	mov	r2, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff ff6b 	bl	8002e44 <__ssputs_r>
 8002f6e:	3001      	adds	r0, #1
 8002f70:	f000 80a7 	beq.w	80030c2 <_svfiprintf_r+0x1c6>
 8002f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f76:	445a      	add	r2, fp
 8002f78:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 809f 	beq.w	80030c2 <_svfiprintf_r+0x1c6>
 8002f84:	2300      	movs	r3, #0
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f8e:	f10a 0a01 	add.w	sl, sl, #1
 8002f92:	9304      	str	r3, [sp, #16]
 8002f94:	9307      	str	r3, [sp, #28]
 8002f96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f9c:	4654      	mov	r4, sl
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa4:	484e      	ldr	r0, [pc, #312]	@ (80030e0 <_svfiprintf_r+0x1e4>)
 8002fa6:	f000 fa47 	bl	8003438 <memchr>
 8002faa:	9a04      	ldr	r2, [sp, #16]
 8002fac:	b9d8      	cbnz	r0, 8002fe6 <_svfiprintf_r+0xea>
 8002fae:	06d0      	lsls	r0, r2, #27
 8002fb0:	bf44      	itt	mi
 8002fb2:	2320      	movmi	r3, #32
 8002fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fb8:	0711      	lsls	r1, r2, #28
 8002fba:	bf44      	itt	mi
 8002fbc:	232b      	movmi	r3, #43	@ 0x2b
 8002fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8002fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fc8:	d015      	beq.n	8002ff6 <_svfiprintf_r+0xfa>
 8002fca:	4654      	mov	r4, sl
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f04f 0c0a 	mov.w	ip, #10
 8002fd2:	9a07      	ldr	r2, [sp, #28]
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fda:	3b30      	subs	r3, #48	@ 0x30
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d94b      	bls.n	8003078 <_svfiprintf_r+0x17c>
 8002fe0:	b1b0      	cbz	r0, 8003010 <_svfiprintf_r+0x114>
 8002fe2:	9207      	str	r2, [sp, #28]
 8002fe4:	e014      	b.n	8003010 <_svfiprintf_r+0x114>
 8002fe6:	eba0 0308 	sub.w	r3, r0, r8
 8002fea:	fa09 f303 	lsl.w	r3, r9, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	46a2      	mov	sl, r4
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	e7d2      	b.n	8002f9c <_svfiprintf_r+0xa0>
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	1d19      	adds	r1, r3, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	9103      	str	r1, [sp, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bfbb      	ittet	lt
 8003002:	425b      	neglt	r3, r3
 8003004:	f042 0202 	orrlt.w	r2, r2, #2
 8003008:	9307      	strge	r3, [sp, #28]
 800300a:	9307      	strlt	r3, [sp, #28]
 800300c:	bfb8      	it	lt
 800300e:	9204      	strlt	r2, [sp, #16]
 8003010:	7823      	ldrb	r3, [r4, #0]
 8003012:	2b2e      	cmp	r3, #46	@ 0x2e
 8003014:	d10a      	bne.n	800302c <_svfiprintf_r+0x130>
 8003016:	7863      	ldrb	r3, [r4, #1]
 8003018:	2b2a      	cmp	r3, #42	@ 0x2a
 800301a:	d132      	bne.n	8003082 <_svfiprintf_r+0x186>
 800301c:	9b03      	ldr	r3, [sp, #12]
 800301e:	3402      	adds	r4, #2
 8003020:	1d1a      	adds	r2, r3, #4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	9203      	str	r2, [sp, #12]
 8003026:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800302a:	9305      	str	r3, [sp, #20]
 800302c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80030e4 <_svfiprintf_r+0x1e8>
 8003030:	2203      	movs	r2, #3
 8003032:	4650      	mov	r0, sl
 8003034:	7821      	ldrb	r1, [r4, #0]
 8003036:	f000 f9ff 	bl	8003438 <memchr>
 800303a:	b138      	cbz	r0, 800304c <_svfiprintf_r+0x150>
 800303c:	2240      	movs	r2, #64	@ 0x40
 800303e:	9b04      	ldr	r3, [sp, #16]
 8003040:	eba0 000a 	sub.w	r0, r0, sl
 8003044:	4082      	lsls	r2, r0
 8003046:	4313      	orrs	r3, r2
 8003048:	3401      	adds	r4, #1
 800304a:	9304      	str	r3, [sp, #16]
 800304c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003050:	2206      	movs	r2, #6
 8003052:	4825      	ldr	r0, [pc, #148]	@ (80030e8 <_svfiprintf_r+0x1ec>)
 8003054:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003058:	f000 f9ee 	bl	8003438 <memchr>
 800305c:	2800      	cmp	r0, #0
 800305e:	d036      	beq.n	80030ce <_svfiprintf_r+0x1d2>
 8003060:	4b22      	ldr	r3, [pc, #136]	@ (80030ec <_svfiprintf_r+0x1f0>)
 8003062:	bb1b      	cbnz	r3, 80030ac <_svfiprintf_r+0x1b0>
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	3307      	adds	r3, #7
 8003068:	f023 0307 	bic.w	r3, r3, #7
 800306c:	3308      	adds	r3, #8
 800306e:	9303      	str	r3, [sp, #12]
 8003070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003072:	4433      	add	r3, r6
 8003074:	9309      	str	r3, [sp, #36]	@ 0x24
 8003076:	e76a      	b.n	8002f4e <_svfiprintf_r+0x52>
 8003078:	460c      	mov	r4, r1
 800307a:	2001      	movs	r0, #1
 800307c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003080:	e7a8      	b.n	8002fd4 <_svfiprintf_r+0xd8>
 8003082:	2300      	movs	r3, #0
 8003084:	f04f 0c0a 	mov.w	ip, #10
 8003088:	4619      	mov	r1, r3
 800308a:	3401      	adds	r4, #1
 800308c:	9305      	str	r3, [sp, #20]
 800308e:	4620      	mov	r0, r4
 8003090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003094:	3a30      	subs	r2, #48	@ 0x30
 8003096:	2a09      	cmp	r2, #9
 8003098:	d903      	bls.n	80030a2 <_svfiprintf_r+0x1a6>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0c6      	beq.n	800302c <_svfiprintf_r+0x130>
 800309e:	9105      	str	r1, [sp, #20]
 80030a0:	e7c4      	b.n	800302c <_svfiprintf_r+0x130>
 80030a2:	4604      	mov	r4, r0
 80030a4:	2301      	movs	r3, #1
 80030a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80030aa:	e7f0      	b.n	800308e <_svfiprintf_r+0x192>
 80030ac:	ab03      	add	r3, sp, #12
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	462a      	mov	r2, r5
 80030b2:	4638      	mov	r0, r7
 80030b4:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <_svfiprintf_r+0x1f4>)
 80030b6:	a904      	add	r1, sp, #16
 80030b8:	f3af 8000 	nop.w
 80030bc:	1c42      	adds	r2, r0, #1
 80030be:	4606      	mov	r6, r0
 80030c0:	d1d6      	bne.n	8003070 <_svfiprintf_r+0x174>
 80030c2:	89ab      	ldrh	r3, [r5, #12]
 80030c4:	065b      	lsls	r3, r3, #25
 80030c6:	f53f af2d 	bmi.w	8002f24 <_svfiprintf_r+0x28>
 80030ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030cc:	e72c      	b.n	8002f28 <_svfiprintf_r+0x2c>
 80030ce:	ab03      	add	r3, sp, #12
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	462a      	mov	r2, r5
 80030d4:	4638      	mov	r0, r7
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <_svfiprintf_r+0x1f4>)
 80030d8:	a904      	add	r1, sp, #16
 80030da:	f000 f87d 	bl	80031d8 <_printf_i>
 80030de:	e7ed      	b.n	80030bc <_svfiprintf_r+0x1c0>
 80030e0:	0800428a 	.word	0x0800428a
 80030e4:	08004290 	.word	0x08004290
 80030e8:	08004294 	.word	0x08004294
 80030ec:	00000000 	.word	0x00000000
 80030f0:	08002e45 	.word	0x08002e45

080030f4 <_printf_common>:
 80030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	4616      	mov	r6, r2
 80030fa:	4698      	mov	r8, r3
 80030fc:	688a      	ldr	r2, [r1, #8]
 80030fe:	690b      	ldr	r3, [r1, #16]
 8003100:	4607      	mov	r7, r0
 8003102:	4293      	cmp	r3, r2
 8003104:	bfb8      	it	lt
 8003106:	4613      	movlt	r3, r2
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800310e:	460c      	mov	r4, r1
 8003110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003114:	b10a      	cbz	r2, 800311a <_printf_common+0x26>
 8003116:	3301      	adds	r3, #1
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	0699      	lsls	r1, r3, #26
 800311e:	bf42      	ittt	mi
 8003120:	6833      	ldrmi	r3, [r6, #0]
 8003122:	3302      	addmi	r3, #2
 8003124:	6033      	strmi	r3, [r6, #0]
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	f015 0506 	ands.w	r5, r5, #6
 800312c:	d106      	bne.n	800313c <_printf_common+0x48>
 800312e:	f104 0a19 	add.w	sl, r4, #25
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	6832      	ldr	r2, [r6, #0]
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	42ab      	cmp	r3, r5
 800313a:	dc2b      	bgt.n	8003194 <_printf_common+0xa0>
 800313c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	3b00      	subs	r3, #0
 8003144:	bf18      	it	ne
 8003146:	2301      	movne	r3, #1
 8003148:	0692      	lsls	r2, r2, #26
 800314a:	d430      	bmi.n	80031ae <_printf_common+0xba>
 800314c:	4641      	mov	r1, r8
 800314e:	4638      	mov	r0, r7
 8003150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003154:	47c8      	blx	r9
 8003156:	3001      	adds	r0, #1
 8003158:	d023      	beq.n	80031a2 <_printf_common+0xae>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	6922      	ldr	r2, [r4, #16]
 800315e:	f003 0306 	and.w	r3, r3, #6
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf14      	ite	ne
 8003166:	2500      	movne	r5, #0
 8003168:	6833      	ldreq	r3, [r6, #0]
 800316a:	f04f 0600 	mov.w	r6, #0
 800316e:	bf08      	it	eq
 8003170:	68e5      	ldreq	r5, [r4, #12]
 8003172:	f104 041a 	add.w	r4, r4, #26
 8003176:	bf08      	it	eq
 8003178:	1aed      	subeq	r5, r5, r3
 800317a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800317e:	bf08      	it	eq
 8003180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003184:	4293      	cmp	r3, r2
 8003186:	bfc4      	itt	gt
 8003188:	1a9b      	subgt	r3, r3, r2
 800318a:	18ed      	addgt	r5, r5, r3
 800318c:	42b5      	cmp	r5, r6
 800318e:	d11a      	bne.n	80031c6 <_printf_common+0xd2>
 8003190:	2000      	movs	r0, #0
 8003192:	e008      	b.n	80031a6 <_printf_common+0xb2>
 8003194:	2301      	movs	r3, #1
 8003196:	4652      	mov	r2, sl
 8003198:	4641      	mov	r1, r8
 800319a:	4638      	mov	r0, r7
 800319c:	47c8      	blx	r9
 800319e:	3001      	adds	r0, #1
 80031a0:	d103      	bne.n	80031aa <_printf_common+0xb6>
 80031a2:	f04f 30ff 	mov.w	r0, #4294967295
 80031a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031aa:	3501      	adds	r5, #1
 80031ac:	e7c1      	b.n	8003132 <_printf_common+0x3e>
 80031ae:	2030      	movs	r0, #48	@ 0x30
 80031b0:	18e1      	adds	r1, r4, r3
 80031b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031bc:	4422      	add	r2, r4
 80031be:	3302      	adds	r3, #2
 80031c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80031c4:	e7c2      	b.n	800314c <_printf_common+0x58>
 80031c6:	2301      	movs	r3, #1
 80031c8:	4622      	mov	r2, r4
 80031ca:	4641      	mov	r1, r8
 80031cc:	4638      	mov	r0, r7
 80031ce:	47c8      	blx	r9
 80031d0:	3001      	adds	r0, #1
 80031d2:	d0e6      	beq.n	80031a2 <_printf_common+0xae>
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7d9      	b.n	800318c <_printf_common+0x98>

080031d8 <_printf_i>:
 80031d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031dc:	7e0f      	ldrb	r7, [r1, #24]
 80031de:	4691      	mov	r9, r2
 80031e0:	2f78      	cmp	r7, #120	@ 0x78
 80031e2:	4680      	mov	r8, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	469a      	mov	sl, r3
 80031e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031ee:	d807      	bhi.n	8003200 <_printf_i+0x28>
 80031f0:	2f62      	cmp	r7, #98	@ 0x62
 80031f2:	d80a      	bhi.n	800320a <_printf_i+0x32>
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	f000 80d3 	beq.w	80033a0 <_printf_i+0x1c8>
 80031fa:	2f58      	cmp	r7, #88	@ 0x58
 80031fc:	f000 80ba 	beq.w	8003374 <_printf_i+0x19c>
 8003200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003208:	e03a      	b.n	8003280 <_printf_i+0xa8>
 800320a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800320e:	2b15      	cmp	r3, #21
 8003210:	d8f6      	bhi.n	8003200 <_printf_i+0x28>
 8003212:	a101      	add	r1, pc, #4	@ (adr r1, 8003218 <_printf_i+0x40>)
 8003214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003218:	08003271 	.word	0x08003271
 800321c:	08003285 	.word	0x08003285
 8003220:	08003201 	.word	0x08003201
 8003224:	08003201 	.word	0x08003201
 8003228:	08003201 	.word	0x08003201
 800322c:	08003201 	.word	0x08003201
 8003230:	08003285 	.word	0x08003285
 8003234:	08003201 	.word	0x08003201
 8003238:	08003201 	.word	0x08003201
 800323c:	08003201 	.word	0x08003201
 8003240:	08003201 	.word	0x08003201
 8003244:	08003387 	.word	0x08003387
 8003248:	080032af 	.word	0x080032af
 800324c:	08003341 	.word	0x08003341
 8003250:	08003201 	.word	0x08003201
 8003254:	08003201 	.word	0x08003201
 8003258:	080033a9 	.word	0x080033a9
 800325c:	08003201 	.word	0x08003201
 8003260:	080032af 	.word	0x080032af
 8003264:	08003201 	.word	0x08003201
 8003268:	08003201 	.word	0x08003201
 800326c:	08003349 	.word	0x08003349
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6032      	str	r2, [r6, #0]
 8003278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800327c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003280:	2301      	movs	r3, #1
 8003282:	e09e      	b.n	80033c2 <_printf_i+0x1ea>
 8003284:	6833      	ldr	r3, [r6, #0]
 8003286:	6820      	ldr	r0, [r4, #0]
 8003288:	1d19      	adds	r1, r3, #4
 800328a:	6031      	str	r1, [r6, #0]
 800328c:	0606      	lsls	r6, r0, #24
 800328e:	d501      	bpl.n	8003294 <_printf_i+0xbc>
 8003290:	681d      	ldr	r5, [r3, #0]
 8003292:	e003      	b.n	800329c <_printf_i+0xc4>
 8003294:	0645      	lsls	r5, r0, #25
 8003296:	d5fb      	bpl.n	8003290 <_printf_i+0xb8>
 8003298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800329c:	2d00      	cmp	r5, #0
 800329e:	da03      	bge.n	80032a8 <_printf_i+0xd0>
 80032a0:	232d      	movs	r3, #45	@ 0x2d
 80032a2:	426d      	negs	r5, r5
 80032a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032a8:	230a      	movs	r3, #10
 80032aa:	4859      	ldr	r0, [pc, #356]	@ (8003410 <_printf_i+0x238>)
 80032ac:	e011      	b.n	80032d2 <_printf_i+0xfa>
 80032ae:	6821      	ldr	r1, [r4, #0]
 80032b0:	6833      	ldr	r3, [r6, #0]
 80032b2:	0608      	lsls	r0, r1, #24
 80032b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80032b8:	d402      	bmi.n	80032c0 <_printf_i+0xe8>
 80032ba:	0649      	lsls	r1, r1, #25
 80032bc:	bf48      	it	mi
 80032be:	b2ad      	uxthmi	r5, r5
 80032c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80032c2:	6033      	str	r3, [r6, #0]
 80032c4:	bf14      	ite	ne
 80032c6:	230a      	movne	r3, #10
 80032c8:	2308      	moveq	r3, #8
 80032ca:	4851      	ldr	r0, [pc, #324]	@ (8003410 <_printf_i+0x238>)
 80032cc:	2100      	movs	r1, #0
 80032ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032d2:	6866      	ldr	r6, [r4, #4]
 80032d4:	2e00      	cmp	r6, #0
 80032d6:	bfa8      	it	ge
 80032d8:	6821      	ldrge	r1, [r4, #0]
 80032da:	60a6      	str	r6, [r4, #8]
 80032dc:	bfa4      	itt	ge
 80032de:	f021 0104 	bicge.w	r1, r1, #4
 80032e2:	6021      	strge	r1, [r4, #0]
 80032e4:	b90d      	cbnz	r5, 80032ea <_printf_i+0x112>
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	d04b      	beq.n	8003382 <_printf_i+0x1aa>
 80032ea:	4616      	mov	r6, r2
 80032ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80032f0:	fb03 5711 	mls	r7, r3, r1, r5
 80032f4:	5dc7      	ldrb	r7, [r0, r7]
 80032f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032fa:	462f      	mov	r7, r5
 80032fc:	42bb      	cmp	r3, r7
 80032fe:	460d      	mov	r5, r1
 8003300:	d9f4      	bls.n	80032ec <_printf_i+0x114>
 8003302:	2b08      	cmp	r3, #8
 8003304:	d10b      	bne.n	800331e <_printf_i+0x146>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	07df      	lsls	r7, r3, #31
 800330a:	d508      	bpl.n	800331e <_printf_i+0x146>
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	6861      	ldr	r1, [r4, #4]
 8003310:	4299      	cmp	r1, r3
 8003312:	bfde      	ittt	le
 8003314:	2330      	movle	r3, #48	@ 0x30
 8003316:	f806 3c01 	strble.w	r3, [r6, #-1]
 800331a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800331e:	1b92      	subs	r2, r2, r6
 8003320:	6122      	str	r2, [r4, #16]
 8003322:	464b      	mov	r3, r9
 8003324:	4621      	mov	r1, r4
 8003326:	4640      	mov	r0, r8
 8003328:	f8cd a000 	str.w	sl, [sp]
 800332c:	aa03      	add	r2, sp, #12
 800332e:	f7ff fee1 	bl	80030f4 <_printf_common>
 8003332:	3001      	adds	r0, #1
 8003334:	d14a      	bne.n	80033cc <_printf_i+0x1f4>
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	b004      	add	sp, #16
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f043 0320 	orr.w	r3, r3, #32
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	2778      	movs	r7, #120	@ 0x78
 800334a:	4832      	ldr	r0, [pc, #200]	@ (8003414 <_printf_i+0x23c>)
 800334c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	6831      	ldr	r1, [r6, #0]
 8003354:	061f      	lsls	r7, r3, #24
 8003356:	f851 5b04 	ldr.w	r5, [r1], #4
 800335a:	d402      	bmi.n	8003362 <_printf_i+0x18a>
 800335c:	065f      	lsls	r7, r3, #25
 800335e:	bf48      	it	mi
 8003360:	b2ad      	uxthmi	r5, r5
 8003362:	6031      	str	r1, [r6, #0]
 8003364:	07d9      	lsls	r1, r3, #31
 8003366:	bf44      	itt	mi
 8003368:	f043 0320 	orrmi.w	r3, r3, #32
 800336c:	6023      	strmi	r3, [r4, #0]
 800336e:	b11d      	cbz	r5, 8003378 <_printf_i+0x1a0>
 8003370:	2310      	movs	r3, #16
 8003372:	e7ab      	b.n	80032cc <_printf_i+0xf4>
 8003374:	4826      	ldr	r0, [pc, #152]	@ (8003410 <_printf_i+0x238>)
 8003376:	e7e9      	b.n	800334c <_printf_i+0x174>
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	f023 0320 	bic.w	r3, r3, #32
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	e7f6      	b.n	8003370 <_printf_i+0x198>
 8003382:	4616      	mov	r6, r2
 8003384:	e7bd      	b.n	8003302 <_printf_i+0x12a>
 8003386:	6833      	ldr	r3, [r6, #0]
 8003388:	6825      	ldr	r5, [r4, #0]
 800338a:	1d18      	adds	r0, r3, #4
 800338c:	6961      	ldr	r1, [r4, #20]
 800338e:	6030      	str	r0, [r6, #0]
 8003390:	062e      	lsls	r6, r5, #24
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	d501      	bpl.n	800339a <_printf_i+0x1c2>
 8003396:	6019      	str	r1, [r3, #0]
 8003398:	e002      	b.n	80033a0 <_printf_i+0x1c8>
 800339a:	0668      	lsls	r0, r5, #25
 800339c:	d5fb      	bpl.n	8003396 <_printf_i+0x1be>
 800339e:	8019      	strh	r1, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	4616      	mov	r6, r2
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	e7bc      	b.n	8003322 <_printf_i+0x14a>
 80033a8:	6833      	ldr	r3, [r6, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	6032      	str	r2, [r6, #0]
 80033b0:	681e      	ldr	r6, [r3, #0]
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	4630      	mov	r0, r6
 80033b6:	f000 f83f 	bl	8003438 <memchr>
 80033ba:	b108      	cbz	r0, 80033c0 <_printf_i+0x1e8>
 80033bc:	1b80      	subs	r0, r0, r6
 80033be:	6060      	str	r0, [r4, #4]
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ca:	e7aa      	b.n	8003322 <_printf_i+0x14a>
 80033cc:	4632      	mov	r2, r6
 80033ce:	4649      	mov	r1, r9
 80033d0:	4640      	mov	r0, r8
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	47d0      	blx	sl
 80033d6:	3001      	adds	r0, #1
 80033d8:	d0ad      	beq.n	8003336 <_printf_i+0x15e>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	079b      	lsls	r3, r3, #30
 80033de:	d413      	bmi.n	8003408 <_printf_i+0x230>
 80033e0:	68e0      	ldr	r0, [r4, #12]
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	4298      	cmp	r0, r3
 80033e6:	bfb8      	it	lt
 80033e8:	4618      	movlt	r0, r3
 80033ea:	e7a6      	b.n	800333a <_printf_i+0x162>
 80033ec:	2301      	movs	r3, #1
 80033ee:	4632      	mov	r2, r6
 80033f0:	4649      	mov	r1, r9
 80033f2:	4640      	mov	r0, r8
 80033f4:	47d0      	blx	sl
 80033f6:	3001      	adds	r0, #1
 80033f8:	d09d      	beq.n	8003336 <_printf_i+0x15e>
 80033fa:	3501      	adds	r5, #1
 80033fc:	68e3      	ldr	r3, [r4, #12]
 80033fe:	9903      	ldr	r1, [sp, #12]
 8003400:	1a5b      	subs	r3, r3, r1
 8003402:	42ab      	cmp	r3, r5
 8003404:	dcf2      	bgt.n	80033ec <_printf_i+0x214>
 8003406:	e7eb      	b.n	80033e0 <_printf_i+0x208>
 8003408:	2500      	movs	r5, #0
 800340a:	f104 0619 	add.w	r6, r4, #25
 800340e:	e7f5      	b.n	80033fc <_printf_i+0x224>
 8003410:	0800429b 	.word	0x0800429b
 8003414:	080042ac 	.word	0x080042ac

08003418 <_sbrk_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	2300      	movs	r3, #0
 800341c:	4d05      	ldr	r5, [pc, #20]	@ (8003434 <_sbrk_r+0x1c>)
 800341e:	4604      	mov	r4, r0
 8003420:	4608      	mov	r0, r1
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	f7fd fba8 	bl	8000b78 <_sbrk>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_sbrk_r+0x1a>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_sbrk_r+0x1a>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	20000648 	.word	0x20000648

08003438 <memchr>:
 8003438:	4603      	mov	r3, r0
 800343a:	b510      	push	{r4, lr}
 800343c:	b2c9      	uxtb	r1, r1
 800343e:	4402      	add	r2, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	4618      	mov	r0, r3
 8003444:	d101      	bne.n	800344a <memchr+0x12>
 8003446:	2000      	movs	r0, #0
 8003448:	e003      	b.n	8003452 <memchr+0x1a>
 800344a:	7804      	ldrb	r4, [r0, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	428c      	cmp	r4, r1
 8003450:	d1f6      	bne.n	8003440 <memchr+0x8>
 8003452:	bd10      	pop	{r4, pc}

08003454 <_realloc_r>:
 8003454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003458:	4680      	mov	r8, r0
 800345a:	4615      	mov	r5, r2
 800345c:	460c      	mov	r4, r1
 800345e:	b921      	cbnz	r1, 800346a <_realloc_r+0x16>
 8003460:	4611      	mov	r1, r2
 8003462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003466:	f7ff bc61 	b.w	8002d2c <_malloc_r>
 800346a:	b92a      	cbnz	r2, 8003478 <_realloc_r+0x24>
 800346c:	f7ff fbf4 	bl	8002c58 <_free_r>
 8003470:	2400      	movs	r4, #0
 8003472:	4620      	mov	r0, r4
 8003474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003478:	f000 f81a 	bl	80034b0 <_malloc_usable_size_r>
 800347c:	4285      	cmp	r5, r0
 800347e:	4606      	mov	r6, r0
 8003480:	d802      	bhi.n	8003488 <_realloc_r+0x34>
 8003482:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003486:	d8f4      	bhi.n	8003472 <_realloc_r+0x1e>
 8003488:	4629      	mov	r1, r5
 800348a:	4640      	mov	r0, r8
 800348c:	f7ff fc4e 	bl	8002d2c <_malloc_r>
 8003490:	4607      	mov	r7, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d0ec      	beq.n	8003470 <_realloc_r+0x1c>
 8003496:	42b5      	cmp	r5, r6
 8003498:	462a      	mov	r2, r5
 800349a:	4621      	mov	r1, r4
 800349c:	bf28      	it	cs
 800349e:	4632      	movcs	r2, r6
 80034a0:	f7ff fbcc 	bl	8002c3c <memcpy>
 80034a4:	4621      	mov	r1, r4
 80034a6:	4640      	mov	r0, r8
 80034a8:	f7ff fbd6 	bl	8002c58 <_free_r>
 80034ac:	463c      	mov	r4, r7
 80034ae:	e7e0      	b.n	8003472 <_realloc_r+0x1e>

080034b0 <_malloc_usable_size_r>:
 80034b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b4:	1f18      	subs	r0, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bfbc      	itt	lt
 80034ba:	580b      	ldrlt	r3, [r1, r0]
 80034bc:	18c0      	addlt	r0, r0, r3
 80034be:	4770      	bx	lr

080034c0 <_init>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr

080034cc <_fini>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	bf00      	nop
 80034d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d2:	bc08      	pop	{r3}
 80034d4:	469e      	mov	lr, r3
 80034d6:	4770      	bx	lr
